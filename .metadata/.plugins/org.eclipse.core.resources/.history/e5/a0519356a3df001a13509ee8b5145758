package external;

import entity.Item;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.*;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

public class GitHubClient {
	private static final String URL_TEMPLATE = "https://jobs.github.com/positions.json?description=%s&lat=%s&long=%s";
	private static final String DEFAULT_KEYWORD = "developer";
	
	public JSONArray search(double lat, double lon, String keyword) {
		// corner case
		if(keyword == null) {
			keyword = DEFAULT_KEYWORD;
		}
		
		try {
			keyword = URLEncoder.encode(keyword, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		String url = String.format(URL_TEMPLATE, keyword, lat, lon);
		
		CloseableHttpClient httpclient = HttpClients.createDefault();
		HttpGet httpget = new HttpGet(url);
		
		ResponseHandler<JSONArray> responseHandler = new ResponseHandler<JSONArray>() {

		        @Override
		        public JSONArray handleResponse(final HttpResponse response) throws IOException, ClientProtocolException {
		            int status = response.getStatusLine().getStatusCode();
		            if (status != 200) {
		            	return new JSONArray();
		            }
		            HttpEntity entity = response.getEntity();
		            if(entity == null) {
		            	return new JSONArray();
		            }
		            String responseBody = EntityUtils.toString(entity);
		            JSONArray array = new JSONArray(responseBody);
		            return array;
		        }
		 };
		 
		 try {
			JSONArray array = httpclient.execute(httpget, responseHandler);
			return array;
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		return new JSONArray();
	}
	
	private List<Item> getItemList(JSONArray array) {
		List<Item> itemList = new ArrayList<>();
		for(int i = 0; i < array.length(); i ++) {
			JSONObject object = array.getJSONObject(i);
			Item item = Item.builder()
					.itemId(getStringFieldOrEmpty(object, "id"))
					.name(getStringFieldOrEmpty(object, "title"))
					.address(getStringFieldOrEmpty(object, "location"))
					.url(getStringFieldOrEmpty(object, "url"))
					.imageUrl(getStringFieldOrEmpty(object, "company_logo"))
					.build();	
			itemList.add(item);

		}
		return itemList;
	}
	
	private String getStringFieldOrEmpty(JSONObject obj, String field) {
		return obj.isNull(field) ? "" : obj.getString(field);
	}

}
